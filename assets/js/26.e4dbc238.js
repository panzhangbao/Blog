(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{530:function(s,n,e){"use strict";e.r(n);var a=e(4),t=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("Boxx",{attrs:{type:"tip"}}),s._v(" "),e("blockquote",[e("p",[s._v("Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。")])]),s._v(" "),e("h3",{attrs:{id:"_1-string-字符串"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-string-字符串"}},[s._v("#")]),s._v(" 1. String（字符串）")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("string是redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。")])]),s._v(" "),e("li",[e("p",[s._v("string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。")])]),s._v(" "),e("li",[e("p",[s._v("string类型是Redis最基本的数据类型，一个键最大能存储512MB。")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("/************  set  ******************/\nset name pan            // 设置 k/v\nsetex name 66 ming      // 设置 k/v 66s 过期\nsetnx name pan          // 当 k/v 都不存在时设置 k/v\nmset name1 1 name2 2    // 设置多个 k/v\npsetex name 66 pan      // 设置 k/v 66ms 过期\nmsetnx name1 1 name2 2  // 当 k/v 都不存在时设置多个 k/v\nsetbit name 6           // 对 name，设置或清除指定偏移量 6 上的位(bit)\nsetrange name 3 niuniu       // 从下标 3 开始复写 串\n\n/**********  数字型  ******************/\nincr age                // 将 age 数字值 +1，如果为非数字型，则直接为 1\nincrby age 66           // 将 age + 66\nincrbyfloat age 20      // 将 age 转为 float 并 +20，非 float 型直接赋值为 20\ndecr age                // age -1\ndecrby age 10             // age -10\n\n/*************  get  ***************/\nget name                // 获取 k\ngetrange name 0 1       // 获取 k （0~1）\ngetset name li          // 设置 k newV，返回 oldV\nmget name name2         // 获取多个 k\nstrlen name             // 返回 串长\ngetbit name 6           // 对 name，获取指定偏移量 6 上的位(bit)\n\n/************  del  **************/\ndel name                // 删除 k\ndel name1 name2         // 删除多个 k\n\nappend name zhangbao    // 追加字符串 name 后缀\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br")])]),e("h3",{attrs:{id:"_2-hash-哈希"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-hash-哈希"}},[s._v("#")]),s._v(" 2. Hash（哈希）")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("Redis hash 是一个键值对集合。")])]),s._v(" "),e("li",[e("p",[s._v("Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("/***************  set  *******************/\nhset user uname pan         // 单 field 设置\n\nhsetnx user uname haha      // 若存在 k、f ，则 set\n\nhmset user username pan password 123456 points 200   // 设置 user 里面有 field(username, password, points)\n\nhincrby user age 10         // 为 field 添加 增量\n\nhincrbyfloat user score 40.3 // 为 field 添加 float 增量\n\nhexists user uname          // 查看 k 中 指定 的 field 是否存在\n\n/*********************  get  ***************/\nhget user username          // 获取 field(username)\n\nhgetall user                // 获取所有 field\n\nhmget user uname age        // 获取 指定几个 field v\n\nhkeys user                  // 获取所有的 key 字段\n\nhvals user\n\nhlen user                   // length\n\n// HSCAN key cursor [MATCH pattern] [COUNT count] 迭代哈希表中的键值对。\nscan 2 match *e* count 4    // 从 返回游标为 2 处 匹配 *e* ，返回个数为 4\n\n/***********************  del  ******************/\nhdel user username          // 删除 field(username)\nhdel user password points   // 删除多个 field\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br")])]),e("h3",{attrs:{id:"_3-list-列表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-list-列表"}},[s._v("#")]),s._v(" 3. List（列表）")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）。")])]),s._v(" "),e("li",[e("p",[s._v("列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储40多亿)。")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("/**************  push  *********************/\nlpush/rpush uname pan // uname 标记名，pan 下标值\n\nlpush uname kong liu wang\n\nlinsert uname before/after wo pan // 在 wo 之前/后 插入 pan\n\nlset uname 2 zhaozilong         // 在下标为2 的位置插入元素 zhaozilong\n\nlpushx/rpushx uname pan        // 为已存在的列表添加值\n\n/************** get  *************/\nlrange uname 0 2 // 输出 下标 0 ~ 2 的元素值\nlindex uname 1  // 通过索引获取列表中的元素\nllen key        // length\n\n/*************  del  *****************/\nlpop uname\nrpop uname          // 移除并获取最后一个元素\nlrem uname 2 pan    // 删除 key 为 uname 值为 pan 的 2 个元素值（顺序查找）\nblpop uname age 10      // 移除并获取列表中的第一个元素，如果列表没有元素会阻塞列表直到等待超时(10s)或发现可弹出元素为止。\n\nbrpop uname age 10      // 移出并获取列表的最后一个元素\n\nrpoplpush uname uname2      // 移除列表的最后一个元素，并将该元素添加到另一个列表并返回\nbrpoplpush uname uname2 10  // 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止\n\nltrim uname 1 3     // 截取下标 1 ~ 3 的值\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br")])]),e("h3",{attrs:{id:"_4-set-集合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-set-集合"}},[s._v("#")]),s._v(" 4. Set（集合）")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("Redis的Set是string类型的无序集合。")])]),s._v(" "),e("li",[e("p",[s._v("集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\nsadd uname a b c d a    // 向 set 插入 一个或多个 member\n\n/*************  return  *********************/\nscard uname             // return member's count\nsmembers key\nsrandmember key [count] // 返回集合中一个或多个随机数\n\n// 差集\nsdiff uname age         // return all set's 差集\nsdiffstore storename uname age  // 将 差集存储在 storename set 中\n\n// 交集\nsinter uname username   // set 交集\nsinterstore user uname username // set 交集存在 user 中\n\n// 并集\nsunion key1 [key2] // 并集\nsunionstore destination key1 [key2]\n\n/**************  del  *****************/\nspop key        // 移除并返回集合中的一个随机元素\n\nsrem key member1 [member2] \n\n/////////////////////////////\nsismember uname li      // 判断 li 是否为 uname set 的 member\n\nsmove source destination member\n\nsscan cursor [MATCH pattern] [COUNT count]  // 迭代集合中的元素\nsscan uname 2 match *a* count 2\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br")])]),e("h3",{attrs:{id:"_5-zset-sorted-set-有序集合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-zset-sorted-set-有序集合"}},[s._v("#")]),s._v(" 5. zset(sorted set：有序集合)")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。")])]),s._v(" "),e("li",[e("p",[s._v("不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。")])]),s._v(" "),e("li",[e("p",[s._v("zset的成员是唯一的,但分数(score)却可以重复。")])])]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[s._v("序号")]),s._v(" "),e("th",[s._v("命令")]),s._v(" "),e("th",[s._v("描述")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("1")]),s._v(" "),e("td",[s._v("ZADD key score1 member1 [score2 member2]")]),s._v(" "),e("td",[s._v("向有序集合添加一个或多个成员，或者更新已存在成员的分数")])]),s._v(" "),e("tr",[e("td",[s._v("2")]),s._v(" "),e("td",[s._v("ZCARD key")]),s._v(" "),e("td",[s._v("获取有序集合的成员数")])]),s._v(" "),e("tr",[e("td",[s._v("3")]),s._v(" "),e("td",[s._v("ZCOUNT key min max")]),s._v(" "),e("td",[s._v("计算在有序集合中指定区间分数的成员数")])]),s._v(" "),e("tr",[e("td",[s._v("4")]),s._v(" "),e("td",[s._v("ZINCRBY key increment member")]),s._v(" "),e("td",[s._v("有序集合中对指定成员的分数加上增量 increment")])]),s._v(" "),e("tr",[e("td",[s._v("5")]),s._v(" "),e("td",[s._v("ZINTERSTORE destination numkeys key [key ...]")]),s._v(" "),e("td",[s._v("计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中")])]),s._v(" "),e("tr",[e("td",[s._v("6")]),s._v(" "),e("td",[s._v("ZLEXCOUNT key min max")]),s._v(" "),e("td",[s._v("在有序集合中计算指定字典区间内成员数量")])]),s._v(" "),e("tr",[e("td",[s._v("7")]),s._v(" "),e("td",[s._v("ZRANGE key start stop [WITHSCORES]")]),s._v(" "),e("td",[s._v("通过索引区间返回有序集合成指定区间内的成员")])]),s._v(" "),e("tr",[e("td",[s._v("8")]),s._v(" "),e("td",[s._v("ZRANGEBYLEX key min max [LIMIT offset count]")]),s._v(" "),e("td",[s._v("通过字典区间返回有序集合的成员")])]),s._v(" "),e("tr",[e("td",[s._v("9")]),s._v(" "),e("td",[s._v("ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]")]),s._v(" "),e("td",[s._v("通过分数返回有序集合指定区间内的成员")])]),s._v(" "),e("tr",[e("td",[s._v("10")]),s._v(" "),e("td",[s._v("ZRANK key member")]),s._v(" "),e("td",[s._v("返回有序集合中指定成员的索引")])]),s._v(" "),e("tr",[e("td",[s._v("11")]),s._v(" "),e("td",[s._v("ZREM key member [member ...]")]),s._v(" "),e("td",[s._v("移除有序集合中的一个或多个成员")])]),s._v(" "),e("tr",[e("td",[s._v("12")]),s._v(" "),e("td",[s._v("ZREMRANGEBYLEX key min max")]),s._v(" "),e("td",[s._v("移除有序集合中给定的字典区间的所有成员")])]),s._v(" "),e("tr",[e("td",[s._v("13")]),s._v(" "),e("td",[s._v("ZREMRANGEBYRANK key start stop")]),s._v(" "),e("td",[s._v("移除有序集合中给定的排名区间的所有成员")])]),s._v(" "),e("tr",[e("td",[s._v("14")]),s._v(" "),e("td",[s._v("ZREMRANGEBYSCORE key min max")]),s._v(" "),e("td",[s._v("移除有序集合中给定的分数区间的所有成员")])]),s._v(" "),e("tr",[e("td",[s._v("15")]),s._v(" "),e("td",[s._v("ZREVRANGE key start stop [WITHSCORES]")]),s._v(" "),e("td",[s._v("返回有序集中指定区间内的成员，通过索引，分数从高到底")])]),s._v(" "),e("tr",[e("td",[s._v("16")]),s._v(" "),e("td",[s._v("ZREVRANGEBYSCORE key max min [WITHSCORES]")]),s._v(" "),e("td",[s._v("返回有序集中指定分数区间内的成员，分数从高到低排序")])]),s._v(" "),e("tr",[e("td",[s._v("17")]),s._v(" "),e("td",[s._v("ZREVRANK key member")]),s._v(" "),e("td",[s._v("返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序")])]),s._v(" "),e("tr",[e("td",[s._v("18")]),s._v(" "),e("td",[s._v("ZSCORE key member")]),s._v(" "),e("td",[s._v("返回有序集中，成员的分数值")])]),s._v(" "),e("tr",[e("td",[s._v("19")]),s._v(" "),e("td",[s._v("ZUNIONSTORE destination numkeys key [key ...]")]),s._v(" "),e("td",[s._v("计算给定的一个或多个有序集的并集，并存储在新的 key 中")])]),s._v(" "),e("tr",[e("td",[s._v("20")]),s._v(" "),e("td",[s._v("ZSCAN key cursor [MATCH pattern] [COUNT count]")]),s._v(" "),e("td",[s._v("迭代有序集合中的元素（包括元素成员和元素分值）")])])])])],1)}),[],!1,null,null,null);n.default=t.exports}}]);